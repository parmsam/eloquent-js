---
title: "ch03-functions"
format: html
---

## Functions

- Functions have a set of parameters (in this case, only x) and a body, which contains the statements that are to be executed when the function is called.
- A return keyword without an expression after it will cause the function to return undefined. Functions that don't have a return statement at all, such as makeNoise, similarly return undefined.

## Scope

- Each binding has a scope, which is the part of the program in which the binding is visible.
- Bindings declared with let and const are in fact local to the block in which they are declared, so if you create one of those inside of a loop, the code before and after the loop cannot “see” it.
    - In contrast, bindings declared with var are visible throughout the whole function that they appear in—or throughout the global scope, if they are not in a function. `var` is an older way of declaring variables in JavaScript. It is not recommended to use `var` in modern JavaScript.

## Ways of declaring functions

- There are several ways to declare functions in JavaScript:
    - Function as values which is where you can store a function in a variable. 
    - Function declarations which is where you can declare a function using the `function` keyword.
    - Arrow function which is a shorter way to write a function.
- Below are examples

```{ojs}
// Function as values
const square = function(x) {
    return x * x;
};
// Function declarations
function square(x) {
    return x * x;
}
// Arrow function
const square = (x) => x * x;
```

## Optional args

- JavaScript is extremely broad-minded about the number of arguments you can pass to a function. 
    - If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters are assigned the value undefined.

## Closure

- Being able to reference a specific instance of a local binding in an enclosing scope is called closure.
- This behavior not only frees you from having to worry about lifetimes of bindings but also makes it possible to use function values in some creative ways.
- A good mental model is to think of function values as containing both the code in their body and the environment in which they are created.

## Recursion

- A function that calls itself is called recursive.
- In typical JavaScript implementations, recursion is about three times slower than a version using a for loop.
- Recursion is not always just an ineﬀicient alternative to looping. Some prob- lems really are easier to solve with recursion than with loops. Most often these are problems that require exploring or processing several “branches”, each of which might branch out again into even more branches.

## Pure functions

- A pure function is a specific kind of value-producing function that not only has no side effects but also doesn’t rely on side effects from other code—for example, it doesn’t read global bindings whose value might change.