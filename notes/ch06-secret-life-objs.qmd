---
title: "ch06 - secret life objects"
format: html
---

# Abstract data types

- An abstract data type (ADT) is a subprogram that may contain arbitrarily complicated code but exposes a limited set of methods and properties that people working with it are supposed to use. 
- It is the same as a class in object-oriented programming.
- You can think of JavaScript’s built-in data structures, such as arrays and strings, as such reusable abstract data types.
- Each abstract data type has an interface, the collection of operations that external code can perform on it.

# Methods

-  In JavaScript, methods are nothing more than properties that hold function values.
- Here's a simple method:

```{ojs}
function speak(line) {
  console.log(`The ${this.type} rabbit says '${line}'`);
}
let whiteRabbit = {type: "white", speak};
let hungryRabbit = {type: "hungry", speak};

whiteRabbit.speak("Oh my fur and whiskers");
// → The white rabbit says 'Oh my fur and whiskers'
hungryRabbit.speak("Got any carrots?");
// → The hungry rabbit says 'Got any carrots?'
```

- When a function is called as a method—looked up as a property and immediately called, as in `object.method()`. The binding called `this` in its body automatically points at the object on which it was called.

# Prototypes

- Using prototypes, objects can be linked to other objects, to magically get all the properties that other object has.
- When an object gets a request for a property that it doesn’t have, its prototype will be searched for the property.
- Functions derive from `Function.prototype` and arrays derive from `Array.prototype`.
- You can use `Object.create` to create an object with a specific prototype

# Classes

- A class defines the shape of a type of object—what methods and properties it has.
- Such an object is called an instance of the class.
- JavaScript’s class notation is just a convenient way to work with prototypes.
- The `class` keyword starts a class declaration and allows us to define a constructor and a set of methods together.
  - Constructors, in JavaScript, are called by putting the keyword `new` in front of them. It creates a fresh instance object whose prototype is the object from the function’s prototype property, then runs the function with this bound to the new object, and finally returns the object.
    - By convention, the names of constructors are capitalized so that they can easily be distinguished from other functions.
  - `Class` was only introduced in the 2015 edition of JavaScript.


```{ojs}
class Rabbit {
  constructor(type) {
    this.type = type;
  }
  speak(line) {
    console.log(`The ${this.type} rabbit says '${line}'`);
  }
}
```

# Private Properties

- Private properties in classes define some properties and methods for internal use that are not part of their interface. Public properties, in contrast, are accessible from the outside.
- To declare a private method, put a `#` sign in front of its name.

```{ojs}
class SecretiveObject {
  #getSecret() {
    return "I ate all the plums";
  }
  interrogate() {
    let shallISayIt = this.#getSecret();
    return "never";
  }
}
```

# Maps

- A map (noun) is a data structure that associates values (the keys) with other values. 
- There is a built-in `Map` class which stores a mapping and allows any type of keys. The methods set, get, and has are part of the interface of the Map object.

```{ojs}
let ages = new Map();
ages.set("Boris", 39);
ages.set("Liang", 22);
ages.set("Júlia", 62);

console.log(`Júlia is ${ages.get("Júlia")}`);
// → Júlia is 62
console.log("Is Jack's age known?", ages.has("Jack"));
// → Is Jack's age known? false
console.log(ages.has("toString"));
// → false
```

# Polymorphism

- A polymorphic interface is an interface that is implemented by many different types.

# Getters, setters, and statics

```{ojs}
class Temperature {
  constructor(celsius) {
    this.celsius = celsius;
  }
  get fahrenheit() {
    return this.celsius * 1.8 + 32;
  }
  set fahrenheit(value) {
    this.celsius = (value - 32) / 1.8;
  }

  static fromFahrenheit(value) {
    return new Temperature((value - 32) / 1.8);
  }
}

let temp = new Temperature(22);
console.log(temp.fahrenheit);
// → 71.6
temp.fahrenheit = 86;
console.log(temp.celsius);
// → 30
```

